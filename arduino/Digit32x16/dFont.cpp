/*
  Font library

  Copyright 2009/2010 Benjamin Sonntag <benjamin@sonntag.fr> http://benjamin.sonntag.fr/
  
  History:
  	2010-01-01 - V0.0 Initial code at Berlin after 26C3
  	2010-09-10 - ikkei replaced font data to bit map font
  				 that is similar LCD SC-1602BS Standard Character Pattern
  				 and place to flash memory
  				<ikkei@zeus.eonet.ne.jp> http://blog.goo.ne.jp/jh3kxm
  	2010-09-17 - ikkei modified font data to narrow font and wide font
  	2011-12-15 - ikkei modified font data to Misaki font and add Hiragana,
  				 and delete draw function

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.
*/



#include "dFont.h"
//#include "Digit32x16.h"
#include <inttypes.h>
#include <avr/pgmspace.h>


//### bit map font data
const uint8_t dotfont[][7] PROGMEM = {
// 0x20-0x7F data paste here
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00 },
{ 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00 },
{ 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00 },
{ 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00 },
{ 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00 },
{ 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00 },
{ 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00 },
{ 0x22, 0x14, 0x7F, 0x14, 0x22, 0x00, 0x00 },
{ 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00 },
{ 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 },
{ 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00 },
{ 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00 },
{ 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00 },
{ 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00 },
{ 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00 },
{ 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00 },
{ 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00 },
{ 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00 },
{ 0x01, 0x61, 0x19, 0x05, 0x03, 0x00, 0x00 },
{ 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00 },
{ 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00 },
{ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x56, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 },
{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00 },
{ 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00 },
{ 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00 },
{ 0x1C, 0x22, 0x59, 0x55, 0x4D, 0x12, 0x0C },
{ 0x60, 0x1C, 0x13, 0x1C, 0x60, 0x00, 0x00 },
{ 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00 },
{ 0x1C, 0x22, 0x41, 0x41, 0x22, 0x00, 0x00 },
{ 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00 },
{ 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00 },
{ 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00 },
{ 0x1C, 0x22, 0x41, 0x49, 0x3A, 0x00, 0x00 },
{ 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00 },
{ 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00 },
{ 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00 },
{ 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 },
{ 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },
{ 0x7F, 0x02, 0x04, 0x08, 0x04, 0x02, 0x7F },
{ 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00 },
{ 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00 },
{ 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00 },
{ 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00 },
{ 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00 },
{ 0x46, 0x49, 0x49, 0x49, 0x31, 0x00, 0x00 },
{ 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00 },
{ 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00 },
{ 0x03, 0x1C, 0x60, 0x1C, 0x03, 0x00, 0x00 },
{ 0x1F, 0x60, 0x18, 0x06, 0x18, 0x60, 0x1F },
{ 0x41, 0x22, 0x14, 0x08, 0x14, 0x22, 0x41 },
{ 0x01, 0x02, 0x04, 0x78, 0x04, 0x02, 0x01 },
{ 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00 },
{ 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00 },
{ 0x15, 0x16, 0x7C, 0x16, 0x15, 0x00, 0x00 },
{ 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00 },
{ 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 },
{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00 },
{ 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00 },
{ 0x20, 0x54, 0x54, 0x78, 0x00, 0x00, 0x00 },
{ 0x7F, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00 },
{ 0x38, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00 },
{ 0x38, 0x44, 0x44, 0x7F, 0x00, 0x00, 0x00 },
{ 0x38, 0x54, 0x54, 0x58, 0x00, 0x00, 0x00 },
{ 0x04, 0x7E, 0x05, 0x01, 0x00, 0x00, 0x00 },
{ 0x18, 0xA4, 0xA4, 0x7C, 0x00, 0x00, 0x00 },
{ 0x7F, 0x04, 0x04, 0x78, 0x00, 0x00, 0x00 },
{ 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x80, 0x80, 0x7D, 0x00, 0x00, 0x00, 0x00 },
{ 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00 },
{ 0x01, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00, 0x00 },
{ 0x7C, 0x04, 0x04, 0x78, 0x00, 0x00, 0x00 },
{ 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00 },
{ 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00 },
{ 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00 },
{ 0x7C, 0x08, 0x04, 0x04, 0x00, 0x00, 0x00 },
{ 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00 },
{ 0x04, 0x3E, 0x44, 0x44, 0x00, 0x00, 0x00 },
{ 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00 },
{ 0x0C, 0x30, 0x40, 0x30, 0x0C, 0x00, 0x00 },
{ 0x1C, 0x60, 0x18, 0x60, 0x1C, 0x00, 0x00 },
{ 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00 },
{ 0x84, 0x98, 0x60, 0x18, 0x04, 0x00, 0x00 },
{ 0x44, 0x64, 0x54, 0x4C, 0x00, 0x00, 0x00 },
{ 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00 },
{ 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00 },
{ 0x08, 0x08, 0x08, 0x2A, 0x1C, 0x08, 0x00 },
{ 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x00 },



// 0x80-0xFF data paste here
{ 0x60, 0x70, 0x3F, 0x02, 0x0C, 0x00, 0x00 },
{ 0x04, 0x64, 0x3C, 0x1F, 0x3C, 0x64, 0x04 },
{ 0x1C, 0x3E, 0x7F, 0x7F, 0x7F, 0x3E, 0x1C },
{ 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08 },
{ 0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E },
{ 0x05, 0x05, 0x7D, 0x05, 0x05, 0x00, 0x00 },
{ 0x10, 0x0A, 0x2E, 0x5B, 0x72, 0x4A, 0x48 },
{ 0x20, 0x54, 0x7E, 0x34, 0x14, 0x60, 0x00 },
{ 0x3C, 0x40, 0x20, 0x04, 0x18, 0x00, 0x00 },
{ 0x10, 0x4A, 0x2A, 0x10, 0x00, 0x00, 0x00 },
{ 0x48, 0x2A, 0x5A, 0x40, 0x00, 0x00, 0x00 },
{ 0x24, 0x7E, 0x14, 0x50, 0x24, 0x00, 0x00 },
{ 0x08, 0x0C, 0x38, 0x46, 0x14, 0x08, 0x00 },
{ 0x1C, 0x48, 0x3E, 0x24, 0x18, 0x00, 0x00 },
{ 0x20, 0x50, 0x3E, 0x28, 0x48, 0x00, 0x00 },
{ 0x10, 0x10, 0x48, 0x48, 0x30, 0x00, 0x00 },
{ 0x08, 0x04, 0x04, 0x08, 0x10, 0x10, 0x08 },
{ 0x20, 0x52, 0x7F, 0x2A, 0x1A, 0x4A, 0x30 },
{ 0x3E, 0x40, 0x20, 0x00, 0x02, 0x1C, 0x00 },
{ 0x08, 0x45, 0x45, 0x25, 0x18, 0x00, 0x00 },
{ 0x44, 0x25, 0x35, 0x4D, 0x40, 0x00, 0x00 },
{ 0x32, 0x7F, 0x0A, 0x49, 0x32, 0x00, 0x00 },
{ 0x44, 0x34, 0x4F, 0x44, 0x38, 0x04, 0x18 },
{ 0x2A, 0x4B, 0x4E, 0x5A, 0x08, 0x00, 0x00 },
{ 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 },
{ 0x3F, 0x00, 0x44, 0x3F, 0x04, 0x00, 0x00 },
{ 0x20, 0x52, 0x42, 0x42, 0x40, 0x00, 0x00 },
{ 0x24, 0x47, 0x4C, 0x54, 0x00, 0x00, 0x00 },
{ 0x3F, 0x40, 0x40, 0x20, 0x00, 0x00, 0x00 },
{ 0x02, 0x0A, 0x56, 0x3F, 0x02, 0x00, 0x00 },
{ 0x04, 0x3F, 0x44, 0x5F, 0x44, 0x00, 0x00 },
{ 0x08, 0x0D, 0x3B, 0x49, 0x48, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x20, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00 },
{ 0x3F, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00 },
{ 0x40, 0x40, 0x40, 0x7E, 0x00, 0x00, 0x00 },
{ 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x4A, 0x4A, 0x2A, 0x1E, 0x00, 0x00, 0x00 },
{ 0x04, 0x44, 0x3C, 0x14, 0x0C, 0x00, 0x00 },
{ 0x20, 0x10, 0x78, 0x04, 0x00, 0x00, 0x00 },
{ 0x18, 0x48, 0x4C, 0x28, 0x18, 0x00, 0x00 },
{ 0x40, 0x48, 0x78, 0x48, 0x40, 0x00, 0x00 },
{ 0x48, 0x28, 0x18, 0x7C, 0x08, 0x00, 0x00 },
{ 0x08, 0x1C, 0x68, 0x08, 0x18, 0x00, 0x00 },
{ 0x40, 0x48, 0x48, 0x78, 0x40, 0x00, 0x00 },
{ 0x44, 0x54, 0x54, 0x7C, 0x00, 0x00, 0x00 },
{ 0x18, 0x40, 0x58, 0x20, 0x18, 0x00, 0x00 },
{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 },
{ 0x01, 0x41, 0x3D, 0x09, 0x07, 0x00, 0x00 },
{ 0x10, 0x10, 0x08, 0x7C, 0x02, 0x01, 0x00 },
{ 0x06, 0x42, 0x43, 0x22, 0x1E, 0x00, 0x00 },
{ 0x40, 0x44, 0x7C, 0x44, 0x40, 0x00, 0x00 },
{ 0x22, 0x12, 0x0A, 0x7F, 0x02, 0x00, 0x00 },
{ 0x42, 0x32, 0x0F, 0x42, 0x7E, 0x00, 0x00 },
{ 0x12, 0x13, 0x1E, 0x72, 0x10, 0x00, 0x00 },
{ 0x48, 0x44, 0x23, 0x12, 0x0E, 0x00, 0x00 },
{ 0x08, 0x07, 0x42, 0x3E, 0x02, 0x02, 0x00 },
{ 0x42, 0x42, 0x42, 0x42, 0x7E, 0x00, 0x00 },
{ 0x02, 0x4F, 0x22, 0x1F, 0x02, 0x00, 0x00 },
{ 0x45, 0x4A, 0x20, 0x10, 0x0C, 0x00, 0x00 },
{ 0x42, 0x22, 0x12, 0x2A, 0x46, 0x00, 0x00 },
{ 0x04, 0x3F, 0x44, 0x54, 0x4C, 0x00, 0x00 },
{ 0x01, 0x46, 0x20, 0x18, 0x07, 0x00, 0x00 },
{ 0x48, 0x44, 0x2B, 0x12, 0x0E, 0x00, 0x00 },
{ 0x08, 0x4A, 0x3E, 0x09, 0x08, 0x00, 0x00 },
{ 0x0E, 0x40, 0x4E, 0x20, 0x1E, 0x00, 0x00 },
{ 0x04, 0x45, 0x3D, 0x05, 0x04, 0x00, 0x00 },
{ 0x7F, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00 },
{ 0x04, 0x44, 0x3F, 0x04, 0x04, 0x00, 0x00 },
{ 0x20, 0x22, 0x22, 0x22, 0x20, 0x00, 0x00 },
{ 0x42, 0x4A, 0x32, 0x1A, 0x26, 0x00, 0x00 },
{ 0x22, 0x12, 0x7B, 0x16, 0x22, 0x00, 0x00 },
{ 0x40, 0x20, 0x18, 0x07, 0x00, 0x00, 0x00 },
{ 0x60, 0x1E, 0x00, 0x0E, 0x70, 0x00, 0x00 },
{ 0x3F, 0x48, 0x48, 0x44, 0x44, 0x00, 0x00 },
{ 0x02, 0x42, 0x22, 0x12, 0x0E, 0x00, 0x00 },
{ 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x20 },
{ 0x24, 0x14, 0x44, 0x7F, 0x04, 0x14, 0x24 },
{ 0x02, 0x12, 0x32, 0x4A, 0x06, 0x00, 0x00 },
{ 0x21, 0x25, 0x4A, 0x42, 0x00, 0x00, 0x00 },
{ 0x60, 0x58, 0x47, 0x20, 0x40, 0x00, 0x00 },
{ 0x40, 0x44, 0x28, 0x18, 0x27, 0x00, 0x00 },
{ 0x08, 0x09, 0x3F, 0x49, 0x48, 0x00, 0x00 },
{ 0x04, 0x07, 0x1C, 0x64, 0x02, 0x0A, 0x06 },
{ 0x20, 0x22, 0x22, 0x3E, 0x20, 0x00, 0x00 },
{ 0x42, 0x4A, 0x4A, 0x4A, 0x7E, 0x00, 0x00 },
{ 0x04, 0x45, 0x45, 0x25, 0x1C, 0x00, 0x00 },
{ 0x0F, 0x40, 0x20, 0x1F, 0x00, 0x00, 0x00 },
{ 0x40, 0x3E, 0x00, 0x7F, 0x20, 0x10, 0x00 },
{ 0x7F, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00 },
{ 0x7E, 0x42, 0x42, 0x42, 0x7E, 0x00, 0x00 },
{ 0x06, 0x42, 0x42, 0x22, 0x1E, 0x00, 0x00 },
{ 0x41, 0x42, 0x20, 0x10, 0x0C, 0x00, 0x00 },
{ 0x01, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00 },
{ 0x02, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00 },
{ 0x72, 0x0F, 0x22, 0x54, 0x44, 0x00, 0x00 },
{ 0x02, 0x1E, 0x4B, 0x4A, 0x32, 0x00, 0x00 },
{ 0x04, 0x04, 0x22, 0x22, 0x1C, 0x00, 0x00 },
{ 0x02, 0x02, 0x1D, 0x23, 0x41, 0x01, 0x00 },
{ 0x20, 0x57, 0x48, 0x48, 0x44, 0x00, 0x00 },
{ 0x0A, 0x27, 0x50, 0x3E, 0x22, 0x00, 0x00 },
{ 0x7F, 0x00, 0x20, 0x52, 0x42, 0x42, 0x00 },
{ 0x30, 0x4E, 0x38, 0x54, 0x0F, 0x64, 0x78 },
{ 0x34, 0x7F, 0x04, 0x22, 0x52, 0x7C, 0x00 },
{ 0x3C, 0x22, 0x1E, 0x42, 0x3C, 0x00, 0x00 },
{ 0x7F, 0x00, 0x24, 0x54, 0x3F, 0x24, 0x00 },
{ 0x3A, 0x47, 0x40, 0x3F, 0x04, 0x00, 0x00 },
{ 0x40, 0x30, 0x40, 0x4D, 0x32, 0x10, 0x60 },
{ 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x10 },
{ 0x7F, 0x00, 0x6A, 0x6A, 0x7E, 0x2A, 0x4A },
{ 0x6A, 0x6A, 0x7F, 0x2A, 0x4A, 0x00, 0x00 },
{ 0x30, 0x29, 0x1D, 0x4B, 0x48, 0x3C, 0x10 },
{ 0x12, 0x2A, 0x7F, 0x42, 0x40, 0x42, 0x24 },
{ 0x30, 0x4E, 0x38, 0x54, 0x0F, 0x44, 0x38 },
{ 0x0A, 0x3E, 0x4B, 0x4A, 0x20, 0x00, 0x00 },
{ 0x04, 0x07, 0x1C, 0x62, 0x03, 0x0A, 0x04 },
{ 0x1E, 0x44, 0x3F, 0x12, 0x0C, 0x00, 0x00 },
{ 0x20, 0x50, 0x3F, 0x24, 0x44, 0x00, 0x00 },
{ 0x1C, 0x51, 0x4A, 0x48, 0x30, 0x00, 0x00 },
{ 0x0F, 0x42, 0x21, 0x1E, 0x00, 0x00, 0x00 },
{ 0x10, 0x69, 0x6D, 0x4B, 0x30, 0x00, 0x00 },
{ 0x34, 0x7F, 0x04, 0x02, 0x3C, 0x40, 0x00 },
{ 0x10, 0x49, 0x4D, 0x4B, 0x30, 0x00, 0x00 },
{ 0x34, 0x7F, 0x04, 0x42, 0x3C, 0x00, 0x00 },
{ 0x60, 0x1C, 0x33, 0x40, 0x20, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
{ 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00 },



};


/* -----------------------------------------------------------------  */
/*

 */
 
uint8_t dFont::Data(uint16_t letter,int x) {
	uint16_t font_data;

	if ( letter < ' ' ) return 0;

	if ( x < 7 ){
		font_data = pgm_read_byte( &(dotfont[ letter - ' ' ][x]));
	} else {
		font_data = 0;
	}

	return font_data;
}

/* -----------------------------------------------------------------  */
/*

 */
 
uint8_t dFont::Width(uint16_t letter) {
	uint16_t maxx = 0;
	uint16_t font_data;
	uint8_t i;
	if ( letter==' ' ) return 2;
	if ( letter < ' ' ) return 0;

	for ( i=0; i<7; i++ ){
		font_data = pgm_read_byte( &(dotfont[ letter - ' ' ][i]));
		if ( font_data != 0 ){
	  		if ( i > maxx ){
	    		maxx = i;
	  		}
	  	}
	}
	return (maxx+1);
}



